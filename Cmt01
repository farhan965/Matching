ALTER PROCEDURE [dbo].[LoadMatchingDataToStaging]
(
    @SourceSchema NVARCHAR(128),
    @SourceTable NVARCHAR(128)
)
AS
BEGIN
    SET NOCOUNT ON;

    DECLARE @SourceTableName NVARCHAR(256) = QUOTENAME(@SourceSchema) + '.' + QUOTENAME(@SourceTable);
    DECLARE @ColumnExists BIT;

    -- Step 1: Check if the source table exists in the database
    IF NOT EXISTS 
    (
        SELECT 1 
        FROM INFORMATION_SCHEMA.TABLES 
        WHERE TABLE_SCHEMA = @SourceSchema 
        AND TABLE_NAME = @SourceTable
    )
    BEGIN
        -- If the table does not exist, raise an error
        RAISERROR('Table %s.%s does not exist.', 16, 1, @SourceSchema, @SourceTable);
        RETURN;
    END

    -- Step 2: Check if the columns already exist in the source table
    SELECT @ColumnExists = COUNT(*)
    FROM INFORMATION_SCHEMA.COLUMNS 
    WHERE TABLE_SCHEMA = @SourceSchema 
    AND TABLE_NAME = @SourceTable 
    AND COLUMN_NAME IN ('status', 'InsertDataTime', 'OD');

    IF @ColumnExists < 3
    BEGIN
        -- Step 3: If the columns do not exist, add them
        DECLARE @AlterTableSQL NVARCHAR(MAX);
        SET @AlterTableSQL = 'ALTER TABLE ' + @SourceTableName + ' ADD 
            status NVARCHAR(50) NULL, 
            InsertDataTime DATETIME NULL, 
            OD NVARCHAR(50) NULL;';
        EXEC sp_executesql @AlterTableSQL;

        -- Step 4: Update the newly added columns based on the required case statements
        DECLARE @UpdateSQL NVARCHAR(MAX);
        SET @UpdateSQL = '
        UPDATE ' + @SourceTableName + '
        SET 
            status = CASE 
                        WHEN /* your condition here */ THEN ''Y''
                        ELSE ''N''
                     END,
            InsertDataTime = CASE 
                                WHEN /* your condition here */ THEN GETDATE()
                                ELSE NULL
                             END,
            OD = CASE 
                    WHEN /* your condition here */ THEN ''NewValue''
                    ELSE NULL
                 END;';
        EXEC sp_executesql @UpdateSQL;

        -- For debugging: Print the dynamic SQL for updating the table
        PRINT 'Columns status, InsertDataTime, and OD added and updated in table ' + @SourceTableName;
    END
    ELSE
    BEGIN
        -- Step 5: If the columns exist, update them where they are NULL and asofdate is max
        DECLARE @UpdateSQL NVARCHAR(MAX);
        SET @UpdateSQL = '
        WITH cte AS 
        (
            SELECT * 
            FROM ' + @SourceTableName + ' 
            WHERE asofdate = (SELECT MAX(asofdate) FROM ' + @SourceTableName + ')
        )
        UPDATE cte
        SET 
            status = CASE 
                        WHEN status IS NULL THEN ''Y''
                        ELSE status
                     END,
            InsertDataTime = CASE 
                                WHEN InsertDataTime IS NULL THEN GETDATE()
                                ELSE InsertDataTime
                             END,
            OD = CASE 
                    WHEN OD IS NULL THEN ''UpdatedValue''
                    ELSE OD
                 END
        WHERE 
            status IS NULL 
            AND InsertDataTime IS NULL 
            AND OD IS NULL;';
        
        EXEC sp_executesql @UpdateSQL;

        -- For debugging: Print the dynamic SQL for updating the table
        PRINT 'Columns status, InsertDataTime, and OD updated in table ' + @SourceTableName;
    END
END;
GO
