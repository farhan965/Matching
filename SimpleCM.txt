
CREATE PROCEDURE [test].[LoadMatchingDataToStagingT5]
(
    @SourceSchema NVARCHAR(128),
    @SourceTable NVARCHAR(128),
    @MappingSchema NVARCHAR(128),
    @MappingTable NVARCHAR(128),
    @MappingSchema2 NVARCHAR(128),
    @MappingTable2 NVARCHAR(128)
)
AS
BEGIN
    SET NOCOUNT ON;

    DECLARE @DynamicSQL NVARCHAR(MAX);
    DECLARE @ColumnNames NVARCHAR(MAX);
    DECLARE @EmailColumnName NVARCHAR(128);
    DECLARE @SecondaryEmailColumnName NVARCHAR(128);
    DECLARE @SourceTableName NVARCHAR(256) = QUOTENAME(@SourceSchema) + '.' + QUOTENAME(@SourceTable);
    DECLARE @MappingTableName NVARCHAR(256) = QUOTENAME(@MappingSchema) + '.' + QUOTENAME(@MappingTable);
    DECLARE @MappingTableName2 NVARCHAR(256) = QUOTENAME(@MappingSchema2) + '.' + QUOTENAME(@MappingTable2);
    DECLARE @NewTableName NVARCHAR(256) = QUOTENAME(@SourceSchema) + '.' + QUOTENAME(@SourceTable + '_Temp_T4');

    -- Step 1: Identify the email column

    IF @SourceSchema = 'test'
    BEGIN
        SELECT @EmailColumnName = NAME
        FROM SYS.COLUMNS 
        WHERE object_id = OBJECT_ID(@SourceTableName) 
        AND NAME IN ('Email_p', 'Email_p1');
        
        IF @EmailColumnName IS NULL
        BEGIN
            RAISERROR('No Email column found in the source table.', 16, 1);
            RETURN;
        END
    END
    ELSE IF @SourceSchema = 'test2'
    BEGIN
        SELECT @EmailColumnName = NAME
        FROM SYS.COLUMNS 
        WHERE object_id = OBJECT_ID(@SourceTableName) 
        AND NAME IN ('Email1', 'Email2');
        
        SELECT @SecondaryEmailColumnName = NAME
        FROM SYS.COLUMNS 
        WHERE object_id = OBJECT_ID(@SourceTableName) 
        AND NAME IN ('sec Email', 'sec Email St');
    END
    
    -- Step 2: Dynamically load all column names from the source table
    SELECT @ColumnNames = STRING_AGG('src.' + QUOTENAME(COLUMN_NAME), ', ')
    FROM INFORMATION_SCHEMA.COLUMNS
    WHERE TABLE_NAME = @SourceTable 
    AND TABLE_SCHEMA = @SourceSchema;

    -- For debugging: Print the dynamic SQL for column names
    PRINT 'Column Names: ' + @ColumnNames;

    -- Step 3: Handle data based on available email columns
    IF @EmailColumnName IS NOT NULL AND @SecondaryEmailColumnName IS NULL
    BEGIN
        SET @DynamicSQL = '
        WITH CTE_PrimaryEmail AS (
            SELECT ' + @ColumnNames + ',
                CASE 
                    WHEN LOWER(src.' + QUOTENAME(@EmailColumnName) + ') IN (SELECT LOWER(New_Email) FROM ' + @MappingTableName + ')
                    THEN ''Y'' ELSE ''N'' 
                END AS Status,
                CASE 
                    WHEN LOWER(src.' + QUOTENAME(@EmailColumnName) + ') IN (SELECT LOWER(New_Email) FROM ' + @MappingTableName + ')
                    THEN GETDATE() ELSE NULL 
                END AS InsertDataTime,
                map.Id as ID
            FROM ' + @SourceTableName + ' AS src
            LEFT JOIN ' + @MappingTableName + ' AS map
            ON (LOWER(src.' + QUOTENAME(@EmailColumnName) + ') = LOWER(map.New_Email))
        )
        SELECT * INTO ' + @NewTableName + ' FROM CTE_PrimaryEmail;';
        
        -- Execute the dynamic SQL for Primary Email
        EXEC sp_executesql @DynamicSQL;
    END
    ELSE IF @EmailColumnName IS NULL AND @SecondaryEmailColumnName IS NOT NULL
    BEGIN
        SET @DynamicSQL = '
        WITH CTE_SecondaryEmail AS (
            SELECT ' + @ColumnNames + ',
                CASE 
                    WHEN LOWER(src.' + QUOTENAME(@SecondaryEmailColumnName) + ') IN (SELECT LOWER(sec_Email) FROM ' + @MappingTableName2 + ')
                    THEN ''Y'' ELSE ''N'' 
                END AS Status,
                CASE 
                    WHEN LOWER(src.' + QUOTENAME(@SecondaryEmailColumnName) + ') IN (SELECT LOWER(sec_Email) FROM ' + @MappingTableName2 + ')
                    THEN GETDATE() ELSE NULL 
                END AS InsertDataTime,
                map2.Id as ID
            FROM ' + @SourceTableName + ' AS src
            LEFT JOIN ' + @MappingTableName2 + ' AS map2
            ON (LOWER(src.' + QUOTENAME(@SecondaryEmailColumnName) + ') = LOWER(map2.sec_Email))
        )
        SELECT * INTO ' + @NewTableName + ' FROM CTE_SecondaryEmail;';
        
        -- Execute the dynamic SQL for Secondary Email
        EXEC sp_executesql @DynamicSQL;
    END
    ELSE IF @EmailColumnName IS NOT NULL AND @SecondaryEmailColumnName IS NOT NULL
    BEGIN
        -- First handle Primary Email
        SET @DynamicSQL = '
        WITH CTE_PrimaryEmail AS (
            SELECT ' + @ColumnNames + ',
                CASE 
                    WHEN LOWER(src.' + QUOTENAME(@EmailColumnName) + ') IN (SELECT LOWER(New_Email) FROM ' + @MappingTableName + ')
                    THEN ''Y'' ELSE ''N'' 
                END AS Status,
                CASE 
                    WHEN LOWER(src.' + QUOTENAME(@EmailColumnName) + ') IN (SELECT LOWER(New_Email) FROM ' + @MappingTableName + ')
                    THEN GETDATE() ELSE NULL 
                END AS InsertDataTime,
                map.Id as ID
            FROM ' + @SourceTableName + ' AS src
            LEFT JOIN ' + @MappingTableName + ' AS map
            ON (LOWER(src.' + QUOTENAME(@EmailColumnName) + ') = LOWER(map.New_Email))
        )
        SELECT * INTO ' + @NewTableName + ' FROM CTE_PrimaryEmail;';
        
        EXEC sp_executesql @DynamicSQL;

        -- Then handle Secondary Email for unmatched records
        SET @DynamicSQL = '
        UPDATE tgt
        SET tgt.Status = ''Y'',
            tgt.InsertDataTime = GETDATE(),
            tgt.Id = map2.Id
        FROM ' + @NewTableName + ' tgt
        INNER JOIN ' + @MappingTableName2 + ' map2
        ON LOWER(tgt.' + QUOTENAME(@SecondaryEmailColumnName) + ') = LOWER(map2.sec_Email)
        WHERE tgt.Status = ''N'';';
        
        -- Execute dynamic SQL for unmatched records
        EXEC sp_executesql @DynamicSQL;
    END

    -- For debugging: Print the final dynamic SQL execution
    PRINT 'Dynamic SQL executed for table: ' + @NewTableName;

END;
GO
