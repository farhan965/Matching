

create PROCEDURE [test].[LoadMatchingDataToStagingT5]
(
    @SourceSchema NVARCHAR(128),
    @SourceTable NVARCHAR(128),
    @MappingSchema NVARCHAR(128),
    @MappingTable NVARCHAR(128),
    @MappingSchema2 NVARCHAR(128),
    @MappingTable2 NVARCHAR(128)
)
AS
BEGIN
    SET NOCOUNT ON;

    DECLARE @DynamicSQL NVARCHAR(MAX);
    DECLARE @ColumnNames NVARCHAR(MAX);
    DECLARE @EmailColumnName NVARCHAR(128);
	 DECLARE @SecondaryEmailColumnName NVARCHAR(128);
    DECLARE @SourceTableName NVARCHAR(256) = QUOTENAME(@SourceSchema) + '.' + QUOTENAME(@SourceTable);
    DECLARE @MappingTableName NVARCHAR(256) = QUOTENAME(@MappingSchema) + '.' + QUOTENAME(@MappingTable);
    DECLARE @MappingTableName2 NVARCHAR(256) = QUOTENAME(@MappingSchema2) + '.' + QUOTENAME(@MappingTable2);
    DECLARE @NewTableName NVARCHAR(256) = QUOTENAME(@SourceSchema) + '.' + QUOTENAME(@SourceTable + '_Temp_T4');

    -- Step 1: Identify the email column

	IF @SourceSchema='test'

	 SELECT @EmailColumnName = NAME
    FROM SYS.COLUMNS 
    WHERE object_id = OBJECT_ID(@SourceTableName) 
    AND NAME IN ('Email_p', 'Email_p1');

    -- Check if an email column was found; if not, raise an error
    IF @EmailColumnName IS NULL
    BEGIN
        RAISERROR('No Email column found in the source table.', 16, 1);
        RETURN;
    END

    -- Step 2: Dynamically load all column names from the source table
    SELECT @ColumnNames = STRING_AGG('src.' + QUOTENAME(COLUMN_NAME), ', ')
    FROM INFORMATION_SCHEMA.COLUMNS
    WHERE TABLE_NAME = @SourceTable 
    AND TABLE_SCHEMA = @SourceSchema;

    -- For debugging: Print the dynamic SQL for column names
    PRINT 'Column Names: ' + @ColumnNames;

    -- Step 3: Create a CTE to perform the operations using the identified Email column
    SET @DynamicSQL = '
    WITH 
    CTE AS
    (
        SELECT ' + @ColumnNames + ',
            CASE 
                WHEN LOWER(src.' + QUOTENAME(@EmailColumnName) + ') IN (SELECT LOWER(map.New_Email) FROM ' + @MappingTableName + ')
                      THEN ''Y''
                ELSE ''N''
            END AS Status,
            CASE 
               WHEN LOWER(src.' + QUOTENAME(@EmailColumnName) + ') IN (SELECT LOWER(map.New_Email) FROM ' + @MappingTableName + ') 
                      THEN GETDATE()
                ELSE NULL
            END AS InsertDataTime,
            map.Id as ID
        FROM ' + @SourceTableName + ' AS src
        LEFT JOIN ' + @MappingTableName + ' AS map
        ON (LOWER(src.' + QUOTENAME(@EmailColumnName) + ') = LOWER(map.New_Email))
    )
        
    -- Step 4: Create the new table from the CTE
    SELECT * INTO ' + @NewTableName + ' FROM CTE;';

	
    -- Execute the dynamic SQL
    EXEC sp_executesql @DynamicSQL;

    -- For debugging: Print the dynamic SQL for table creation
    PRINT 'Dynamic SQL executed to create table: ' + @NewTableName;

	ELSE IF @SourceSchema='test2'
--step 1:
    SELECT 
        @EmailColumnName = NAME
    FROM SYS.COLUMNS 
    WHERE object_id = OBJECT_ID(@SourceTableName) 
    AND NAME IN ('Email1', 'Email2');

	 SELECT 
        @SecondaryEmailColumnName = NAME
    FROM SYS.COLUMNS 
    WHERE object_id = OBJECT_ID(@SourceTableName) 
    AND NAME IN ('sec Email', 'sec Email St');

    -- Step 2: Dynamically load all column names from the source table
    SELECT @ColumnNames = STRING_AGG('src.' + QUOTENAME(COLUMN_NAME), ', ')
    FROM INFORMATION_SCHEMA.COLUMNS
    WHERE TABLE_NAME = @SourceTable 
    AND TABLE_SCHEMA = @SourceSchema;

    -- Step 3: Create a CTE to first update records based on PrimaryEmail
    SET @DynamicSQL = '
        WITH CTE_PrimaryEmail AS (
            SELECT ' + @ColumnNames + ',
                CASE 
                    WHEN LOWER(src.' + QUOTENAME(@EmailColumnName) + ') IN (SELECT LOWER(New_Email) FROM ' + @MappingTableName + ')
                         THEN ''Y'' ELSE ''N'' 
                END AS Status,
                CASE 
                    WHEN LOWER(src.' + QUOTENAME(@EmailColumnName) + ') IN (SELECT LOWER(New_Email) FROM ' + @MappingTableName + ')
                         THEN GETDATE() ELSE NULL 
                END AS InsertDataTime,
                map.Id as ID
        FROM ' + @SourceTableName + ' AS src
        LEFT JOIN ' + @MappingTableName + ' AS map
        ON (LOWER(src.' + QUOTENAME(@EmailColumnName) + ') = LOWER(map.New_Email))
        )
        SELECT * INTO ' + @NewTableName + ' FROM CTE_PrimaryEmail;';

    -- Execute dynamic SQL to load data based on PrimaryEmail
    EXEC sp_executesql @DynamicSQL;

    -- Step 4: Update records that are still unmatched using SecondaryEmail
    SET @DynamicSQL = '
        UPDATE tgt
        SET tgt.Status = ''Y'',
            tgt.InsertDataTime = GETDATE(),
            tgt.Id = map2.Id
        FROM ' + @NewTableName + ' tgt
        inner JOIN ' + @MappingTableName2 + ' map2
        ON LOWER(tgt.' + QUOTENAME(@SecondaryEmailColumnName) + ') = LOWER(map2.sec_Email)
        WHERE tgt.Status = ''N'';'; -- Unmatched records
    
    -- Execute dynamic SQL to update unmatched records based on SecondaryEmail
    EXEC sp_executesql @DynamicSQL;

    -- Print dynamic SQL for debugging (optional)
    PRINT 'Dynamic SQL executed for ' + @NewTableName;

END;
GO


