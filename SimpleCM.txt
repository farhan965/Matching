ALTER PROCEDURE [test].[LoadMatchingDataToStagingT1]
(
    @SourceSchema NVARCHAR(128),
    @SourceTable NVARCHAR(128),
    @MappingSchema NVARCHAR(128),
    @MappingTable NVARCHAR(128)
)
AS
BEGIN
    SET NOCOUNT ON;

    DECLARE @DynamicSQL NVARCHAR(MAX);
    DECLARE @ColumnNames NVARCHAR(MAX);
    DECLARE @EmailColumnName NVARCHAR(128);
    DECLARE @SourceTableName NVARCHAR(256) = QUOTENAME(@SourceSchema) + '.' + QUOTENAME(@SourceTable);
    DECLARE @MappingTableName NVARCHAR(256) = QUOTENAME(@MappingSchema) + '.' + QUOTENAME(@MappingTable);
    DECLARE @NewTableName NVARCHAR(256) = QUOTENAME(@SourceSchema) + '.' + QUOTENAME(@SourceTable + '_Temp');

    -- Step 1: Identify the email column
    SELECT 
        @EmailColumnName = NAME
    FROM SYS.COLUMNS 
    WHERE object_id = OBJECT_ID(@SourceTableName) 
    AND NAME IN ('Email1', 'Email2');

    -- Step 2: Dynamically load all column names from the source table
    SELECT @ColumnNames = STRING_AGG('src.' + QUOTENAME(COLUMN_NAME), ', ')
    FROM INFORMATION_SCHEMA.COLUMNS
    WHERE TABLE_NAME = @SourceTable 
    AND TABLE_SCHEMA = @SourceSchema;

    -- Step 3: Build the query with UNION ALL for PrimaryEmail and SecondaryEmail checks
    SET @DynamicSQL = '
        WITH CTE_MatchPrimary AS (
            SELECT ' + @ColumnNames + ',
                ''PrimaryEmail'' AS MatchedOn,
                ''Y'' AS Status,
                GETDATE() AS InsertDataTime
            FROM ' + @SourceTableName + ' AS src
            WHERE LOWER(src.' + QUOTENAME(@EmailColumnName) + ') IN (SELECT LOWER(map.PrimaryEmail) FROM ' + @MappingTableName + ' map)
        ),
        CTE_MatchSecondary AS (
            SELECT ' + @ColumnNames + ',
                ''SecondaryEmail'' AS MatchedOn,
                ''Y'' AS Status,
                GETDATE() AS InsertDataTime
            FROM ' + @SourceTableName + ' AS src
            WHERE LOWER(src.' + QUOTENAME(@EmailColumnName) + ') IN (SELECT LOWER(map.SecondaryEmail) FROM ' + @MappingTableName + ' map)
            AND src.' + QUOTENAME(@EmailColumnName) + ' NOT IN (SELECT ' + QUOTENAME(@EmailColumnName) + ' FROM CTE_MatchPrimary)
        ),
        CTE_Unmatched AS (
            SELECT ' + @ColumnNames + ',
                NULL AS MatchedOn,
                ''N'' AS Status,
                NULL AS InsertDataTime
            FROM ' + @SourceTableName + ' AS src
            WHERE src.' + QUOTENAME(@EmailColumnName) + ' NOT IN (SELECT ' + QUOTENAME(@EmailColumnName) + ' FROM CTE_MatchPrimary)
            AND src.' + QUOTENAME(@EmailColumnName) + ' NOT IN (SELECT ' + QUOTENAME(@EmailColumnName) + ' FROM CTE_MatchSecondary)
        )
        
        -- Insert all results into the new table
        SELECT * INTO ' + @NewTableName + '
        FROM CTE_MatchPrimary
        UNION ALL
        SELECT * FROM CTE_MatchSecondary
        UNION ALL
        SELECT * FROM CTE_Unmatched;
    ';

    -- Execute dynamic SQL
    EXEC sp_executesql @DynamicSQL;

    -- Print dynamic SQL for debugging (optional)
    PRINT 'Dynamic SQL executed for ' + @NewTableName;

END;
GO
