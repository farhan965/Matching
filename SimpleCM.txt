ALTER PROCEDURE [test].[LoadMatchingDataToStagingT3]
(
    @SourceSchema NVARCHAR(128),
    @SourceTable NVARCHAR(128),
    @MappingSchema NVARCHAR(128),
    @MappingTable NVARCHAR(128)
)
AS
BEGIN
    SET NOCOUNT ON;

    DECLARE @DynamicSQL NVARCHAR(MAX);
    DECLARE @ColumnNames NVARCHAR(MAX);
    DECLARE @EmailColumnName NVARCHAR(128);
    DECLARE @IDColumnName NVARCHAR(128);
    DECLARE @SourceTableName NVARCHAR(256) = QUOTENAME(@SourceSchema) + '.' + QUOTENAME(@SourceTable);
    DECLARE @MappingTableName NVARCHAR(256) = QUOTENAME(@MappingSchema) + '.' + QUOTENAME(@MappingTable);
    DECLARE @NewTableName NVARCHAR(256) = QUOTENAME(@SourceSchema) + '.' + QUOTENAME(@SourceTable + '_Temp');

    -- Step 1: Dynamically identify the correct email column from the source table
    IF @SourceSchema = 'test1'
    BEGIN
        -- Define dynamic CTE1 for test1
        SET @DynamicSQL = '
        WITH cte1 AS (
            SELECT DISTINCT Email AS New_Email 
            FROM ' + @MappingTableName + '
            WHERE [RecordType.Developer] IN (''Ad'', ''Hid'', ''Hom'')
            
            UNION ALL
            
            SELECT DISTINCT Secondary_Email__c AS New_Email 
            FROM ' + @MappingTableName + '
            WHERE [RecordType.Developer] IN (''Ad'', ''Hid'', ''Hom'')
        )';
        
        -- Fetch email column name from source table
        SELECT @EmailColumnName = NAME
        FROM SYS.COLUMNS 
        WHERE object_id = OBJECT_ID(@SourceTableName) 
        AND NAME IN ('FA Email', 'FA-PM Email');
        
        IF @EmailColumnName IS NULL
        BEGIN
            RAISERROR('No Email column found in the source table.', 16, 1);
            RETURN;
        END

        -- Load all column names from source table
        SELECT @ColumnNames = STRING_AGG('src.' + QUOTENAME(COLUMN_NAME), ', ')
        FROM INFORMATION_SCHEMA.COLUMNS
        WHERE TABLE_NAME = @SourceTable 
        AND TABLE_SCHEMA = @SourceSchema;

        PRINT 'Column Names: ' + @ColumnNames;

        -- Step 3: Create a CTE to perform the operations using the identified Email column
        SET @DynamicSQL = @DynamicSQL + '
        , CTE AS (
            SELECT ' + @ColumnNames + ',
                CASE 
                    WHEN LOWER(src.' + QUOTENAME(@EmailColumnName) + ') IN (SELECT LOWER(map.New_Email) FROM cte1)
                    THEN ''Y''
                    ELSE ''N''
                END AS Status,
                CASE 
                    WHEN LOWER(src.' + QUOTENAME(@EmailColumnName) + ') IN (SELECT LOWER(map.New_Email) FROM cte1)
                    THEN GETDATE()
                    ELSE NULL
                END AS InsertDataTime
            FROM ' + @SourceTableName + ' AS src
        )
        SELECT * INTO ' + @NewTableName + ' FROM CTE;';

        EXEC sp_executesql @DynamicSQL;
        PRINT 'Dynamic SQL executed to create table: ' + @NewTableName;
    END
    ELSE IF @SourceSchema = 'test2'
    BEGIN
        -- Define CTE1 and CTE2 for test2
        SET @DynamicSQL = '
        WITH cte1 AS (
            SELECT DISTINCT Email AS New_Email 
            FROM ' + @MappingTableName + '
            WHERE [RecordType.Developer] IN (''Ad'', ''Hid'', ''Hom'')
            
            UNION ALL
            
            SELECT DISTINCT Secondary_Email__c AS New_Email 
            FROM ' + @MappingTableName + '
            WHERE [RecordType.Developer] IN (''Ad'', ''Hid'', ''Hom'')
        ),
        cte2 AS (
            SELECT DISTINCT ID
            FROM ' + @MappingTableName + '
            WHERE [RecordType.Developer] IN (''Ad'', ''Hid'', ''Hom'')
        )';

        -- Fetch email and ID column names from source table
        SELECT @EmailColumnName = NAME
        FROM SYS.COLUMNS 
        WHERE object_id = OBJECT_ID(@SourceTableName) 
        AND NAME IN ('FA Email', 'FA-PM Email');

        SELECT @IDColumnName = NAME
        FROM SYS.COLUMNS 
        WHERE object_id = OBJECT_ID(@SourceTableName) 
        AND NAME IN ('ID', 'iD2');

        IF @EmailColumnName IS NOT NULL AND @IDColumnName IS NULL
        BEGIN
            -- CTE with only email match
            SET @DynamicSQL = @DynamicSQL + '
            , CTE AS (
                SELECT ' + @ColumnNames + ',
                    CASE 
                        WHEN LOWER(src.' + QUOTENAME(@EmailColumnName) + ') IN (SELECT LOWER(New_Email) FROM cte1)
                        THEN ''Y''
                        ELSE ''N''
                    END AS Status,
                    CASE 
                        WHEN LOWER(src.' + QUOTENAME(@EmailColumnName) + ') IN (SELECT LOWER(New_Email) FROM cte1)
                        THEN GETDATE()
                        ELSE NULL
                    END AS InsertDataTime
                FROM ' + @SourceTableName + ' AS src
            )
            SELECT * INTO ' + @NewTableName + ' FROM CTE;';
        END
        ELSE IF @EmailColumnName IS NOT NULL AND @IDColumnName IS NOT NULL
        BEGIN
            -- CTE with both email and ID match
            SET @DynamicSQL = @DynamicSQL + '
            , CTE AS (
                SELECT ' + @ColumnNames + ',
                    CASE 
                        WHEN LOWER(src.' + QUOTENAME(@EmailColumnName) + ') IN (SELECT LOWER(New_Email) FROM cte1) 
                        OR (src.' + QUOTENAME(@IDColumnName) + ') IN (SELECT ID FROM cte2)
                        THEN ''Y''
                        ELSE ''N''
                    END AS Status,
                    CASE 
                        WHEN LOWER(src.' + QUOTENAME(@EmailColumnName) + ') IN (SELECT LOWER(New_Email) FROM cte1) 
                        OR (src.' + QUOTENAME(@IDColumnName) + ') IN (SELECT ID FROM cte2)
                        THEN GETDATE()
                        ELSE NULL
                    END AS InsertDataTime
                FROM ' + @SourceTableName + ' AS src
            )
            SELECT * INTO ' + @NewTableName + ' FROM CTE;';
        END

        EXEC sp_executesql @DynamicSQL;
        PRINT 'Dynamic SQL executed to create table: ' + @NewTableName;
    END
END
GO
