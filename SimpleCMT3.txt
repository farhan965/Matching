USE [Matching]
GO

/****** Object:  StoredProcedure [dbo].[LoadMatchingDataToStaging]    Script Date: 9/2/2024 9:48:19 AM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO



ALTER PROCEDURE [dbo].[LoadMatchingDataToStaging]
(
    @SourceSchema NVARCHAR(128),
    @SourceTable NVARCHAR(128),
    @MappingSchema NVARCHAR(128),
    @MappingTable NVARCHAR(128),
    @StagingSchema NVARCHAR(128),
    @StagingTable NVARCHAR(128),
    @NonMatchingSchema NVARCHAR(128)
)
AS
BEGIN
    SET NOCOUNT ON;

    DECLARE @DynamicSQL NVARCHAR(MAX);
    DECLARE @ColumnNames NVARCHAR(MAX);
    DECLARE @SourceTableName NVARCHAR(256) = QUOTENAME(@SourceSchema) + '.' + QUOTENAME(@SourceTable);
    DECLARE @MappingTableName NVARCHAR(256) = QUOTENAME(@MappingSchema) + '.' + QUOTENAME(@MappingTable);
    DECLARE @StagingTableName NVARCHAR(256) = QUOTENAME(@StagingSchema) + '.' + QUOTENAME(@StagingTable);
    DECLARE @NonMatchingTableName NVARCHAR(256) = QUOTENAME(@NonMatchingSchema) + '.' + QUOTENAME(@StagingTable);

    -- Step 1: Dynamically load column names from the source table
    SELECT @ColumnNames = STRING_AGG('src.' + QUOTENAME(COLUMN_NAME), ', ')
    FROM INFORMATION_SCHEMA.COLUMNS
    WHERE TABLE_NAME = @SourceTable 
    AND TABLE_SCHEMA = @SourceSchema;

    -- For debugging: Print the dynamic SQL for column names
    PRINT 'Column Names: ' + @ColumnNames;

    -- Step 2: Drop the staging and non-matching tables if they already exist
    SET @DynamicSQL = 'IF OBJECT_ID(''' + @StagingTableName + ''', ''U'') IS NOT NULL DROP TABLE ' + @StagingTableName + ';';
    -- For debugging: Print the dynamic SQL for dropping the existing matching table
	PRINT 'Dropping Existing  Matching Table:' +  @DynamicSQL;
	EXEC sp_executesql @DynamicSQL;
	

    SET @DynamicSQL = 'IF OBJECT_ID(''' + @NonMatchingTableName + ''', ''U'') IS NOT NULL DROP TABLE ' + @NonMatchingTableName + ';';
    -- For debugging: Print the dynamic SQL for dropping the existing Non matching table
	PRINT 'Dropping Existing Non Matching Table:' + @DynamicSQL;
	EXEC sp_executesql @DynamicSQL;

    -- Step 3: Create the staging table dynamically with the same schema as the source table
    SET @DynamicSQL = 'SELECT ' + REPLACE(@ColumnNames, 'src.', '') + ' INTO ' + @StagingTableName + ' FROM ' + @SourceTableName + ' WHERE 1=0;';
    
    -- For debugging: Print the dynamic SQL for creating the staging table
    PRINT 'Create Staging Table SQL: ' + @DynamicSQL;
    
    EXEC sp_executesql @DynamicSQL;

    -- Step 4: Create the non-matching table dynamically with the same schema as the source table
    SET @DynamicSQL = 'SELECT ' + REPLACE(@ColumnNames, 'src.', '') + ' INTO ' + @NonMatchingTableName + ' FROM ' + @SourceTableName + ' WHERE 1=0;';
    
    -- For debugging: Print the dynamic SQL for creating the non-matching table
    PRINT 'Create Non-Matching Table SQL: ' + @DynamicSQL;
    
    EXEC sp_executesql @DynamicSQL;

    -- Step 5: Insert matching records into the staging table
    SET @DynamicSQL = '
        INSERT INTO ' + @StagingTableName + ' (' + REPLACE(@ColumnNames, 'src.', '') + ')
        SELECT ' + @ColumnNames + '
        FROM ' + @SourceTableName + ' AS src' +  ' '+
		'WHERE src.Region in (select distinct LOWER(region) from' + @MappingTableName + ');';

    -- For debugging: Print the dynamic SQL for inserting matching data
    PRINT 'Insert Matching Records SQL: ' + @DynamicSQL;

    EXEC sp_executesql @DynamicSQL;

    -- Step 6: Insert non-matching records into the non-matching table
    SET @DynamicSQL = '
        INSERT INTO ' + @NonMatchingTableName + ' (' + REPLACE(@ColumnNames, 'src.', '') + ')
        SELECT ' + @ColumnNames + '
        FROM ' + @SourceTableName + ' AS src'+ ' '+
        + 'WHERE src.Region not in (select distinct LOWER(region) from' + @MappingTableName +');';

    -- For debugging: Print the dynamic SQL for inserting non-matching data
    PRINT 'Insert Non-Matching Records SQL: ' + @DynamicSQL;

    EXEC sp_executesql @DynamicSQL;
END;
GO






EXEC dbo.LoadMatchingDataToStaging 
    @SourceSchema = 'Landing',
    @SourceTable = 'Central_Orders',
    @MappingSchema = 'Mapping',
    @MappingTable = 'Central_Orders',
    @StagingSchema = 'Staging',
    @StagingTable = 'Central_Orders',
    @NonMatchingSchema = 'NonMatching';
