

create PROCEDURE [test].[LoadMatchingDataToStagingT4]
(
    @SourceSchema NVARCHAR(128),
    @SourceTable NVARCHAR(128),
    @MappingSchema NVARCHAR(128),
    @MappingTable NVARCHAR(128)
)
AS
BEGIN
    SET NOCOUNT ON;

    DECLARE @DynamicSQL NVARCHAR(MAX);
    DECLARE @ColumnNames NVARCHAR(MAX);
    DECLARE @EmailColumnName NVARCHAR(128);
    DECLARE @SourceTableName NVARCHAR(256) = QUOTENAME(@SourceSchema) + '.' + QUOTENAME(@SourceTable);
    DECLARE @MappingTableName NVARCHAR(256) = QUOTENAME(@MappingSchema) + '.' + QUOTENAME(@MappingTable);
    DECLARE @NewTableName NVARCHAR(256) = QUOTENAME(@SourceSchema) + '.' + QUOTENAME(@SourceTable + '_Temp_T3');

    -- Step 1: Identify the email column
    SELECT 
        @EmailColumnName = NAME
    FROM SYS.COLUMNS 
    WHERE object_id = OBJECT_ID(@SourceTableName) 
    AND NAME IN ('FA Email', 'FA-PM Email');

    -- Step 2: Dynamically load all column names from the source table
    SELECT @ColumnNames = STRING_AGG('src.' + QUOTENAME(COLUMN_NAME), ', ')
    FROM INFORMATION_SCHEMA.COLUMNS
    WHERE TABLE_NAME = @SourceTable 
    AND TABLE_SCHEMA = @SourceSchema;

    -- Step 3: Create a CTE to first update records based on PrimaryEmail
    SET @DynamicSQL = '
        WITH CTE_PrimaryEmail AS (
            SELECT ' + @ColumnNames + ',
                CASE 
                    WHEN LOWER(src.' + QUOTENAME(@EmailColumnName) + ') IN (SELECT LOWER(Email) FROM ' + @MappingTableName1 + ')
                         THEN ''Y'' ELSE ''N'' 
                END AS Status,
                CASE 
                    WHEN LOWER(src.' + QUOTENAME(@EmailColumnName) + ') IN (SELECT LOWER(Email) FROM ' + @MappingTableName1 + ')
                         THEN GETDATE() ELSE NULL 
                END AS InsertDataTime,
             map.Id as ID
        FROM ' + @SourceTableName + ' AS src
        LEFT JOIN ' + @MappingTableName + ' AS map
        ON (LOWER(src.' + QUOTENAME(@EmailColumnName) + ') = LOWER(map.New_Email))
        )
        SELECT * INTO ' + @NewTableName + ' FROM CTE_PrimaryEmail;';
    
    -- Execute dynamic SQL to load data based on PrimaryEmail
    EXEC sp_executesql @DynamicSQL;

    -- Step 4: Update records that are still unmatched using SecondaryEmail
    SET @DynamicSQL = '
        UPDATE tgt
        SET tgt.Status = ''Y'',
            tgt.InsertDataTime = GETDATE(), tgt.Id=
        FROM ' + @NewTableName + ' tgt
        WHERE tgt.Status = ''N'' -- Unmatched records
        AND LOWER(tgt.' + QUOTENAME(@EmailColumnName) + ') IN 
        (SELECT LOWER(Secondary_Email__c) FROM ' + @MappingTableName1 + ')
		left join ' + @MappingTableName  + m1 on tgt.Id=m1.Id
    
    -- Execute dynamic SQL to update unmatched records based on SecondaryEmail
    EXEC sp_executesql @DynamicSQL;

    -- Print dynamic SQL for debugging (optional)
    PRINT 'Dynamic SQL executed for ' + @NewTableName;

END;
GO


