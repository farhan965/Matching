ALTER PROCEDURE [test].[LoadMatchingDataToStagingT3]
(
    @SourceSchema NVARCHAR(128),
    @SourceTable NVARCHAR(128),
    @MappingSchema NVARCHAR(128),
    @MappingTable NVARCHAR(128),
    @BatchSize INT = 100000  -- Batch size for processing
)
AS
BEGIN
    SET NOCOUNT ON;

    DECLARE @SourceTableName NVARCHAR(256) = QUOTENAME(@SourceSchema) + '.' + QUOTENAME(@SourceTable);
    DECLARE @MappingTableName NVARCHAR(256) = QUOTENAME(@MappingSchema) + '.' + QUOTENAME(@MappingTable);
    DECLARE @NewTableName NVARCHAR(256) = QUOTENAME(@SourceSchema) + '.' + QUOTENAME(@SourceTable + '_Temp');
    DECLARE @RowCount INT = 1;  -- Initialize with a non-zero value for the loop

    -- Step 1: Create a new table with all columns from the source and a new Status column
    DECLARE @DynamicSQL NVARCHAR(MAX);
    SET @DynamicSQL = '
    SELECT *, ''N'' AS Status
    INTO ' + @NewTableName + '
    FROM ' + @SourceTableName + ';';

    EXEC sp_executesql @DynamicSQL;

    -- Ensure indexes on temporary table for faster updates
    SET @DynamicSQL = 'CREATE INDEX idx_email ON ' + @NewTableName + ' (Email);';
    EXEC sp_executesql @DynamicSQL;
    
    -- Step 2: Process in batches for Primary Email
    WHILE @RowCount > 0
    BEGIN
        SET @DynamicSQL = '
        UPDATE TOP (' + CAST(@BatchSize AS NVARCHAR(10)) + ') tgt
        SET Status = ''Y''
        FROM ' + @NewTableName + ' AS tgt
        WHERE LOWER(tgt.Email) IN (
            SELECT LOWER(map.Email)
            FROM ' + @MappingTableName + ' AS map
        )
        AND tgt.Status = ''N'';';  -- Only update if Status is still N

        EXEC sp_executesql @DynamicSQL;

        -- Get the number of rows updated in the last operation
        SET @RowCount = @@ROWCOUNT;

        -- If no rows were updated, exit the loop
        IF @RowCount = 0 BREAK;
    END;

    -- Step 3: Update Status based on Secondary Email in batches
    SET @RowCount = 1;  -- Reset for the next batch
    WHILE @RowCount > 0
    BEGIN
        SET @DynamicSQL = '
        UPDATE TOP (' + CAST(@BatchSize AS NVARCHAR(10)) + ') tgt
        SET Status = ''Y''
        FROM ' + @NewTableName + ' AS tgt
        WHERE LOWER(tgt.Email) IN (
            SELECT LOWER(map.Secondary_Email)
            FROM ' + @MappingTableName + ' AS map
        )
        AND tgt.Status = ''N'';';  -- Only update if Status is still N

        EXEC sp_executesql @DynamicSQL;

        -- Get the number of rows updated in the last operation
        SET @RowCount = @@ROWCOUNT;

        IF @RowCount = 0 BREAK;
    END;

    -- Optional: If you want to review the newly created table
    PRINT 'New table created: ' + @NewTableName;
END;
GO  
