DECLARE @ColumnName NVARCHAR(128);

SELECT @ColumnName = NAME
FROM SYS.COLUMNS where object_id=OBJECT_ID('table_name') 
  AND NAME IN ('Email1', 'Email2');

-- To check if a column was found
IF @ColumnName IS NOT NULL
BEGIN
    PRINT 'Found column: ' + @ColumnName;
END
ELSE
BEGIN
    PRINT 'No matching column found';
END;

----Proc---


ALTER PROCEDURE [test].[LoadMatchingDataToStagingT1]
(
    @SourceSchema NVARCHAR(128),
    @SourceTable NVARCHAR(128),
    @MappingSchema NVARCHAR(128),
    @MappingTable NVARCHAR(128)
     -- Parameter to provide a new table name
)
AS
BEGIN
    SET NOCOUNT ON;

    DECLARE @DynamicSQL NVARCHAR(MAX);
    DECLARE @ColumnNames NVARCHAR(MAX);
    DECLARE @SourceTableName NVARCHAR(256) = QUOTENAME(@SourceSchema) + '.' + QUOTENAME(@SourceTable);
    DECLARE @MappingTableName NVARCHAR(256) = QUOTENAME(@MappingSchema) + '.' + QUOTENAME(@MappingTable);
    DECLARE @NewTableName NVARCHAR(256) = QUOTENAME(@SourceSchema) + '.' + QUOTENAME(@SourceTable + '_T');
	

    -- Step 1: Dynamically load column names from the source table
    SELECT @ColumnNames = STRING_AGG('src.' + QUOTENAME(COLUMN_NAME), ', ')
    FROM INFORMATION_SCHEMA.COLUMNS
    WHERE TABLE_NAME = @SourceTable 
    AND TABLE_SCHEMA = @SourceSchema;

    -- For debugging: Print the dynamic SQL for column names
    PRINT 'Column Names: ' + @ColumnNames;

    -- Step 2: Create a CTE to perform the operations
    SET @DynamicSQL = '
    WITH 
    CTE AS
    (
        SELECT ' + @ColumnNames + ',
            CASE 
                WHEN LOWER(src.[FA-PM Email]) IN (SELECT  LOWER(map.New_Email) FROM ' + @MappingTableName + ')
                      THEN ''Y''
                ELSE ''N''
            END AS Status,
            CASE 
               WHEN LOWER(src.[FA-PM Email]) IN (SELECT  LOWER(map.New_Email) FROM ' + @MappingTableName + ')
                      THEN GETDATE()
                ELSE NULL
            END AS InsertDataTime,
			map.Id as ID
    FROM ' + @SourceTableName + ' AS src
    LEFT JOIN ' + @MappingTableName + ' AS map
    ON (LOWER(src.[FA-PM Email]) = LOWER(map.New_Email)))
	
        
   
    -- Step 3: Create the new table from the CTE
    SELECT * INTO ' + @NewTableName + ' FROM CTE;';

    -- Execute the dynamic SQL
    EXEC sp_executesql @DynamicSQL;

    -- For debugging: Print the dynamic SQL for table creation
    PRINT 'Dynamic SQL executed to create table: ' + @NewTableName;

END;
