ALTER PROCEDURE [test].[LoadMatchingDataToStagingT3]
(
    @SourceSchema NVARCHAR(128),
    @SourceTable NVARCHAR(128),
    @MappingSchema NVARCHAR(128),
    @MappingTable NVARCHAR(128)
)
AS
BEGIN
    SET NOCOUNT ON;

    DECLARE @DynamicSQL NVARCHAR(MAX);
    DECLARE @ColumnNames NVARCHAR(MAX);
    DECLARE @EmailColumnName NVARCHAR(128);
    DECLARE @FirstNameColumn NVARCHAR(128);
    DECLARE @LastNameColumn NVARCHAR(128);
    DECLARE @IDColumn NVARCHAR(128);
    DECLARE @SourceTableName NVARCHAR(256) = QUOTENAME(@SourceSchema) + '.' + QUOTENAME(@SourceTable);
    DECLARE @MappingTableName NVARCHAR(256) = QUOTENAME(@MappingSchema) + '.' + QUOTENAME(@MappingTable);
    DECLARE @NewTableName NVARCHAR(256) = QUOTENAME(@SourceSchema) + '.' + QUOTENAME(@SourceTable + '_Temp');

    -- Step 1: Dynamically identify required columns based on source schema
    IF @SourceSchema = 'test1'
    BEGIN
        -- Only fetch Email column for test1 schema
        SELECT 
            @EmailColumnName = NAME
        FROM SYS.COLUMNS 
        WHERE object_id = OBJECT_ID(@SourceTableName) 
        AND NAME IN ('Email1', 'Email2');
    END
    ELSE IF @SourceSchema = 'test2'
    BEGIN
        -- Fetch Email and ID columns for test2 schema
        SELECT 
            @EmailColumnName = NAME
        FROM SYS.COLUMNS 
        WHERE object_id = OBJECT_ID(@SourceTableName) 
        AND NAME IN ('Email1', 'Email2');

        SELECT 
            @IDColumn = NAME
        FROM SYS.COLUMNS 
        WHERE object_id = OBJECT_ID(@SourceTableName)
        AND NAME = 'ID';
    END
    ELSE IF @SourceSchema = 'test3'
    BEGIN
        -- Fetch Email, First Name, and Last Name columns for test3 schema
        SELECT 
            @EmailColumnName = NAME
        FROM SYS.COLUMNS 
        WHERE object_id = OBJECT_ID(@SourceTableName) 
        AND NAME IN ('Email1', 'Email2');

        SELECT 
            @FirstNameColumn = NAME
        FROM SYS.COLUMNS 
        WHERE object_id = OBJECT_ID(@SourceTableName)
        AND NAME = 'First Name';

        SELECT 
            @LastNameColumn = NAME
        FROM SYS.COLUMNS 
        WHERE object_id = OBJECT_ID(@SourceTableName)
        AND NAME = 'Last Name';
    END

    -- Step 2: Dynamically load all column names from the source table
    SELECT @ColumnNames = STRING_AGG('src.' + QUOTENAME(COLUMN_NAME), ', ')
    FROM INFORMATION_SCHEMA.COLUMNS
    WHERE TABLE_NAME = @SourceTable 
    AND TABLE_SCHEMA = @SourceSchema;

    -- Step 3: Continue with the logic based on the columns fetched above
    -- Use @EmailColumnName, @FirstNameColumn, @LastNameColumn, @IDColumn as needed in your dynamic SQL
    
    -- Example of a CTE based on the schema logic
    IF @SourceSchema = 'test1'
    BEGIN
        -- Logic for test1 schema
        SET @DynamicSQL = '
        WITH CTE AS
        (
            SELECT ' + @ColumnNames + ',
                CASE 
                    WHEN LOWER(src.' + QUOTENAME(@EmailColumnName) + ') IN (SELECT LOWER(map.PrimaryEmail) FROM ' + @MappingTableName + ')
                         OR LOWER(src.' + QUOTENAME(@EmailColumnName) + ') IN (SELECT LOWER(map.SecondaryEmail) FROM ' + @MappingTableName + ') 
                         THEN ''Y'' ELSE ''N'' 
                END AS Status,
                CASE 
                    WHEN LOWER(src.' + QUOTENAME(@EmailColumnName) + ') IN (SELECT LOWER(map.PrimaryEmail) FROM ' + @MappingTableName + ')
                         OR LOWER(src.' + QUOTENAME(@EmailColumnName) + ') IN (SELECT LOWER(map.SecondaryEmail) FROM ' + @MappingTableName + ') 
                         THEN GETDATE() ELSE NULL 
                END AS InsertDataTime
            FROM ' + @SourceTableName + ' AS src
        )
        SELECT * INTO ' + @NewTableName + ' FROM CTE;';
    END
    ELSE IF @SourceSchema = 'test2'
    BEGIN
        -- Logic for test2 schema
        SET @DynamicSQL = '
        WITH CTE AS
        (
            SELECT ' + @ColumnNames + ',
                CASE 
                    WHEN LOWER(src.' + QUOTENAME(@EmailColumnName) + ') IN (SELECT LOWER(map.PrimaryEmail) FROM ' + @MappingTableName + ')
                         OR LOWER(src.' + QUOTENAME(@EmailColumnName) + ') IN (SELECT LOWER(map.SecondaryEmail) FROM ' + @MappingTableName + ')
                         OR src.' + QUOTENAME(@IDColumn) + ' = map.ID THEN ''Y'' ELSE ''N'' 
                END AS Status,
                CASE 
                    WHEN LOWER(src.' + QUOTENAME(@EmailColumnName) + ') IN (SELECT LOWER(map.PrimaryEmail) FROM ' + @MappingTableName + ')
                         OR LOWER(src.' + QUOTENAME(@EmailColumnName) + ') IN (SELECT LOWER(map.SecondaryEmail) FROM ' + @MappingTableName + ')
                         OR src.' + QUOTENAME(@IDColumn) + ' = map.ID THEN GETDATE() ELSE NULL 
                END AS InsertDataTime
            FROM ' + @SourceTableName + ' AS src
        )
        SELECT * INTO ' + @NewTableName + ' FROM CTE;';
    END
    ELSE IF @SourceSchema = 'test3'
    BEGIN
        -- Logic for test3 schema
        SET @DynamicSQL = '
        WITH CTE AS
        (
            SELECT ' + @ColumnNames + ',
                CASE 
                    WHEN LOWER(src.' + QUOTENAME(@EmailColumnName) + ') IN (SELECT LOWER(map.PrimaryEmail) FROM ' + @MappingTableName + ')
                         OR LOWER(src.' + QUOTENAME(@EmailColumnName) + ') IN (SELECT LOWER(map.SecondaryEmail) FROM ' + @MappingTableName + ')
                         OR LOWER(src.' + QUOTENAME(@FirstNameColumn) + ') = LOWER(map.FirstName)
                         OR LOWER(src.' + QUOTENAME(@LastNameColumn) + ') = LOWER(map.LastName) 
                         THEN ''Y'' ELSE ''N'' 
                END AS Status,
                CASE 
                    WHEN LOWER(src.' + QUOTENAME(@EmailColumnName) + ') IN (SELECT LOWER(map.PrimaryEmail) FROM ' + @MappingTableName + ')
                         OR LOWER(src.' + QUOTENAME(@EmailColumnName) + ') IN (SELECT LOWER(map.SecondaryEmail) FROM ' + @MappingTableName + ')
                         OR LOWER(src.' + QUOTENAME(@FirstNameColumn) + ') = LOWER(map.FirstName)
                         OR LOWER(src.' + QUOTENAME(@LastNameColumn) + ') = LOWER(map.LastName) 
                         THEN GETDATE() ELSE NULL 
                END AS InsertDataTime
            FROM ' + @SourceTableName + ' AS src
        )
        SELECT * INTO ' + @NewTableName + ' FROM CTE;';
    END

    -- Execute the dynamic SQL
    EXEC sp_executesql @DynamicSQL;

    -- For debugging: Print the dynamic SQL for table creation
    PRINT 'Dynamic SQL executed to create table: ' + @NewTableName;

END;
GO
